"""
Script ƒë·ªÉ build executable t·ª´ PDF to Excel GUI
Ch·∫°y script n√†y ƒë·ªÉ t·∫°o file .exe
"""

import subprocess
import shutil
from pathlib import Path


def build_executable():
    """Build executable v·ªõi PyInstaller"""

    print("üöÄ B·∫Øt ƒë·∫ßu build executable...")

    # Ki·ªÉm tra PyInstaller
    try:
        import PyInstaller

        print(f"‚úì PyInstaller version: {PyInstaller.__version__}")
    except ImportError:
        print("‚ùå PyInstaller ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t!")
        print("Ch·∫°y: pip install pyinstaller")
        return False

    # T·∫°o th∆∞ m·ª•c build n·∫øu ch∆∞a c√≥
    build_dir = Path("build_output")
    build_dir.mkdir(exist_ok=True)

    # C√°c tham s·ªë PyInstaller
    pyinstaller_args = [
        "pyinstaller",
        "--onefile",  # T·∫°o 1 file exe duy nh·∫•t
        "--windowed",  # Kh√¥ng hi·ªán console (GUI app)
        "--name=PDF_to_Excel_Converter",  # T√™n file exe
        "--icon=icon.ico",  # Icon (t√πy ch·ªçn)
        "--distpath=build_output",  # Th∆∞ m·ª•c output
        "--workpath=build_temp",  # Th∆∞ m·ª•c temp
        "--specpath=build_temp",  # Th∆∞ m·ª•c spec
        "--add-data=README.md;.",  # Th√™m README
        "--hidden-import=pdfplumber",
        "--hidden-import=pytesseract",
        "--hidden-import=pdf2image",
        "--hidden-import=PIL",
        "--hidden-import=pandas",
        "--hidden-import=openpyxl",
        "--hidden-import=concurrent.futures",
        "--hidden-import=multiprocessing",
        # Added hidden imports for the new application modules
        "--hidden-import=pdf_converter_app.gui",
        "--hidden-import=pdf_converter_app.pdf_processor",
        "--hidden-import=pdf_converter_app.excel_exporter",
        # "--hidden-import=pdf_converter_app.utils", # utils.py is not used
        "--collect-all=pdfplumber",
        # "--collect-all=pytesseract", # Assuming Tesseract is installed by user and in PATH
        "--noupx",  # Kh√¥ng n√©n ƒë·ªÉ tr√°nh l·ªói antivirus
        "pdf_excel_gui.py",
    ]

    # Lo·∫°i b·ªè icon n·∫øu file kh√¥ng t·ªìn t·∫°i
    if not Path("icon.ico").exists():
        pyinstaller_args = [
            arg for arg in pyinstaller_args if not arg.startswith("--icon")
        ]
        print("‚ö†Ô∏è  Kh√¥ng t√¨m th·∫•y icon.ico, b·ªè qua icon")

    # Ch·∫°y PyInstaller
    try:
        print("üî® ƒêang build executable...")
        result = subprocess.run(pyinstaller_args, capture_output=True, text=True)

        if result.returncode == 0:
            print("‚úÖ Build th√†nh c√¥ng!")

            # Ki·ªÉm tra file exe
            exe_path = build_dir / "PDF_to_Excel_Converter.exe"
            if exe_path.exists():
                exe_size = exe_path.stat().st_size / (1024 * 1024)  # MB
                print(f"üìÅ File exe: {exe_path}")
                print(f"üìè K√≠ch th∆∞·ªõc: {exe_size:.1f} MB")

                # T·∫°o th∆∞ m·ª•c ph√¢n ph·ªëi
                dist_dir = Path("distribution")
                dist_dir.mkdir(exist_ok=True)

                # Copy exe v√† t·∫°o g√≥i ph√¢n ph·ªëi
                shutil.copy2(exe_path, dist_dir)
                create_distribution_package(dist_dir)

                print(f"üéâ Ho√†n th√†nh! File exe t·∫°i: {dist_dir}")
                return True
            else:
                print("‚ùå Kh√¥ng t√¨m th·∫•y file exe sau khi build")
                return False
        else:
            print("‚ùå Build th·∫•t b·∫°i!")
            print("STDOUT:", result.stdout)
            print("STDERR:", result.stderr)
            return False

    except Exception as e:
        print(f"‚ùå L·ªói build: {e}")
        return False


def create_distribution_package(dist_dir):
    """T·∫°o g√≥i ph√¢n ph·ªëi ho√†n ch·ªânh"""

    # T·∫°o README cho ng∆∞·ªùi d√πng
    readme_content = """# PDF to Excel Converter

## H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng:

1. **Ch·∫°y ·ª©ng d·ª•ng**: Double-click v√†o file `PDF_to_Excel_Converter.exe`

2. **Ch·ªçn file PDF**: Nh·∫•n "Ch·ªçn file PDF" ƒë·ªÉ ch·ªçn c√°c file c·∫ßn x·ª≠ l√Ω

3. **Ch·ªçn th∆∞ m·ª•c l∆∞u**: Ch·ªçn n∆°i l∆∞u k·∫øt qu·∫£ Excel

4. **T√πy ch·ªçn**:
   - ‚úÖ OCR: X·ª≠ l√Ω PDF d·∫°ng ·∫£nh (ch·∫≠m h∆°n)
   - ‚úÖ G·ªôp file: T·∫°o 1 Excel chung cho t·∫•t c·∫£ PDF
   - üîß S·ªë lu·ªìng: S·ªë file x·ª≠ l√Ω c√πng l√∫c (4 l√† t·ªëi ∆∞u)

5. **X·ª≠ l√Ω**: Nh·∫•n "B·∫Øt ƒë·∫ßu x·ª≠ l√Ω" v√† ch·ªù ho√†n th√†nh

## Y√™u c·∫ßu h·ªá th·ªëng:
- Windows 10/11 (64-bit)
- RAM: T·ªëi thi·ªÉu 4GB, khuy·∫øn ngh·ªã 8GB+
- ·ªî c·ª©ng: 500MB tr·ªëng (ch∆∞a bao g·ªìm Tesseract v√† Poppler)

## Y√äU C·∫¶U CHO CH·ª®C NƒÇNG OCR (X·ª≠ l√Ω PDF d·∫°ng ·∫£nh):

ƒê·ªÉ s·ª≠ d·ª•ng ch·ª©c nƒÉng OCR (nh·∫≠n d·∫°ng k√Ω t·ª± tr√™n PDF d·∫°ng ·∫£nh), b·∫°n c·∫ßn Tesseract OCR v√† Poppler. C√≥ hai c√°ch ƒë·ªÉ ·ª©ng d·ª•ng t√¨m th·∫•y ch√∫ng:

**C√°ch 1: C√†i ƒë·∫∑t v√† th√™m v√†o PATH (Khuy·∫øn ngh·ªã cho s·ª± ti·ªán l·ª£i)**
1.  **Tesseract OCR**:
    *   T·∫£i v√† c√†i ƒë·∫∑t Tesseract OCR t·ª´ trang ch√≠nh th·ª©c c·ªßa UB Mannheim (khuy·∫øn ngh·ªã): <https://github.com/UB-Mannheim/tesseract/wiki> (T√¨m b·∫£n c√†i ƒë·∫∑t cho Windows). Ho·∫∑c t·ª´ ngu·ªìn ch√≠nh c·ªßa Tesseract: <https://github.com/tesseract-ocr/tesseract> (c√≥ th·ªÉ c·∫ßn t·ª± build ho·∫∑c t√¨m b·∫£n build s·∫µn).
    *   **QUAN TR·ªåNG**: Trong qu√° tr√¨nh c√†i ƒë·∫∑t, ƒë·∫£m b·∫£o b·∫°n ƒë√£ ch·ªçn c√†i ƒë·∫∑t g√≥i ng√¥n ng·ªØ "Vietnamese" (th∆∞·ªùng c√≥ t√™n `vie`).
    *   Th√™m th∆∞ m·ª•c c√†i ƒë·∫∑t Tesseract v√†o bi·∫øn m√¥i tr∆∞·ªùng PATH c·ªßa h·ªá th·ªëng (v√≠ d·ª•: `C:\\Program Files\\Tesseract-OCR`).
2.  **Poppler**:
    *   T·∫£i b·∫£n build Poppler cho Windows t·ª´ (ch·ªçn b·∫£n m·ªõi nh·∫•t, v√≠ d·ª• `poppler-2x.xx.x_x86_64`): <https://github.com/oschwartz10612/poppler-windows/releases>
    *   Gi·∫£i n√©n file t·∫£i v·ªÅ v√†o m·ªôt v·ªã tr√≠ c·ªë ƒë·ªãnh tr√™n m√°y t√≠nh c·ªßa b·∫°n (v√≠ d·ª•: `C:\\poppler`).
    *   Th√™m ƒë∆∞·ªùng d·∫´n ƒë·∫øn th∆∞ m·ª•c `bin` (ho·∫∑c `Library\bin` t√πy thu·ªôc v√†o c·∫•u tr√∫c b·∫£n build Poppler b·∫°n t·∫£i) b√™n trong th∆∞ m·ª•c Poppler v·ª´a gi·∫£i n√©n v√†o bi·∫øn m√¥i tr∆∞·ªùng PATH (v√≠ d·ª•: `C:\\poppler\\bin` ho·∫∑c `C:\\poppler\\Library\\bin`).

    **Ki·ªÉm tra PATH**: Sau khi c√†i ƒë·∫∑t v√† c·∫≠p nh·∫≠t PATH, m·ªü m·ªôt Command Prompt *m·ªõi* v√† g√µ `tesseract --version` r·ªìi Enter, sau ƒë√≥ g√µ `pdftoppm -h` r·ªìi Enter (ho·∫∑c `pdfinfo -h` t√πy theo file th·ª±c thi c√≥ trong th∆∞ m·ª•c `bin` c·ªßa Poppler). N·∫øu c·∫£ hai l·ªánh ƒë·ªÅu ch·∫°y v√† hi·ªÉn th·ªã th√¥ng tin phi√™n b·∫£n/tr·ª£ gi√∫p m√† kh√¥ng b√°o l·ªói "...is not recognized...", nghƒ©a l√† b·∫°n ƒë√£ c·∫•u h√¨nh PATH th√†nh c√¥ng.

**C√°ch 2: Ch·ªâ ƒë·ªãnh ƒë∆∞·ªùng d·∫´n tr·ª±c ti·∫øp trong ·ª©ng d·ª•ng (N·∫øu GUI h·ªó tr·ª£)**
*   M·ªôt s·ªë phi√™n b·∫£n c·ªßa ·ª©ng d·ª•ng n√†y c√≥ th·ªÉ cho ph√©p b·∫°n ch·ªâ ƒë·ªãnh ƒë∆∞·ªùng d·∫´n ƒë·∫øn Tesseract v√† Poppler tr·ª±c ti·∫øp trong giao di·ªán ng∆∞·ªùi d√πng.
*   N·∫øu b·∫°n kh√¥ng mu·ªën th√™m Tesseract v√† Poppler v√†o PATH h·ªá th·ªëng, h√£y ki·ªÉm tra xem trong ph·∫ßn "T√πy ch·ªçn" ho·∫∑c "C√†i ƒë·∫∑t" c·ªßa ·ª©ng d·ª•ng c√≥ c√°c m·ª•c sau kh√¥ng:
    *   "ƒê∆∞·ªùng d·∫´n Tesseract (tesseract.exe)": N·∫øu c√≥, nh·∫•n "Browse..." v√† ch·ªçn ƒë·∫øn file `tesseract.exe` trong th∆∞ m·ª•c c√†i ƒë·∫∑t Tesseract c·ªßa b·∫°n.
    *   "ƒê∆∞·ªùng d·∫´n Poppler (th∆∞ m·ª•c bin)": N·∫øu c√≥, nh·∫•n "Browse..." v√† ch·ªçn ƒë·∫øn th∆∞ m·ª•c ch·ª©a c√°c file th·ª±c thi c·ªßa Poppler (th∆∞·ªùng l√† th∆∞ m·ª•c `bin` ho·∫∑c `Library\bin`).
*   N·∫øu c√°c ƒë∆∞·ªùng d·∫´n n√†y ƒë∆∞·ª£c cung c·∫•p trong GUI, ·ª©ng d·ª•ng s·∫Ω ∆∞u ti√™n s·ª≠ d·ª•ng ch√∫ng. N·∫øu ƒë·ªÉ tr·ªëng ho·∫∑c kh√¥ng c√≥ t√πy ch·ªçn n√†y trong GUI, ·ª©ng d·ª•ng s·∫Ω c·ªë g·∫Øng t√¨m Tesseract v√† Poppler trong PATH h·ªá th·ªëng.

## L∆∞u √Ω:
- File PDF c√†ng l·ªõn v√† ph·ª©c t·∫°p, th·ªùi gian x·ª≠ l√Ω c√†ng l√¢u, ƒë·∫∑c bi·ªát khi b·∫≠t OCR.
- T√≠nh nƒÉng OCR y√™u c·∫ßu Tesseract v√† Poppler ƒë∆∞·ª£c c·∫•u h√¨nh ƒë√∫ng (qua PATH ho·∫∑c ch·ªâ ƒë·ªãnh trong ·ª©ng d·ª•ng).
- B·∫°n c√≥ th·ªÉ x·ª≠ l√Ω nhi·ªÅu file c√πng l√∫c ƒë·ªÉ tƒÉng t·ªëc ƒë·ªô l√†m vi·ªác.

## H·ªó tr·ª£ v√† kh·∫Øc ph·ª•c s·ª± c·ªë:
N·∫øu g·∫∑p l·ªói, vui l√≤ng ki·ªÉm tra:
1.  **ƒê·ªëi v·ªõi l·ªói OCR**: ƒê·∫£m b·∫£o Tesseract v√† Poppler ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t ƒë√∫ng, ng√¥n ng·ªØ ti·∫øng Vi·ªát cho Tesseract ƒë√£ ƒë∆∞·ª£c c√†i, v√† ƒë∆∞·ªùng d·∫´n ƒë√£ ƒë∆∞·ª£c th√™m v√†o PATH ch√≠nh x√°c HO·∫∂C ƒë√£ ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh ƒë√∫ng trong ·ª©ng d·ª•ng.
2.  File PDF kh√¥ng b·ªã l·ªói ho·∫∑c kh√¥ng ƒë∆∞·ª£c b·∫£o v·ªá b·∫±ng m·∫≠t kh·∫©u c·∫•m tr√≠ch xu·∫•t.
3.  C√≤n ƒë·ªß dung l∆∞·ª£ng tr·ªëng tr√™n ·ªï c·ª©ng.
4.  ·ª®ng d·ª•ng kh√¥ng b·ªã ch·∫∑n b·ªüi ph·∫ßn m·ªÅm di·ªát virus.

---
Phi√™n b·∫£n: 1.0
Ng√†y build: """ + str(Path.cwd().stat().st_mtime)

    # Ghi README
    with open(dist_dir / "README.txt", "w", encoding="utf-8") as f:
        f.write(readme_content)

    # T·∫°o file batch ƒë·ªÉ ch·∫°y nhanh
    batch_content = """@echo off
echo Starting PDF to Excel Converter...
PDF_to_Excel_Converter.exe
pause"""

    with open(dist_dir / "run.bat", "w", encoding="utf-8") as f:
        f.write(batch_content)

    print("üìã ƒê√£ t·∫°o README.txt v√† run.bat")


def create_icon():
    """T·∫°o icon ƒë∆°n gi·∫£n cho app"""
    try:
        from PIL import Image, ImageDraw

        # T·∫°o icon 64x64
        img = Image.new("RGBA", (64, 64), (70 + 130 + 180 + 255))  # Steel blue
        draw = ImageDraw.Draw(img)

        # V·∫Ω bi·ªÉu t∆∞·ª£ng PDF
        draw.rectangle(
            [10, 10, 54, 54], fill=(255, 255, 255, 255), outline=(0, 0, 0, 255)
        )
        draw.text((18, 25), "PDF", fill=(255, 0, 0, 255))
        draw.text((18, 35), "->XLS", fill=(0, 128, 0, 255))

        # L∆∞u icon
        img.save("icon.ico", format="ICO")
        print("‚úì ƒê√£ t·∫°o icon.ico")
        return True

    except Exception as e:
        print(f"‚ö†Ô∏è  Kh√¥ng th·ªÉ t·∫°o icon: {e}")
        return False


def main():
    """H√†m main"""
    print("=" * 50)
    print("üì¶ PDF to Excel Converter - Build Script")
    print("=" * 50)

    # T·∫°o icon
    create_icon()

    # Build executable
    success = build_executable()

    if success:
        print("\nüéâ BUILD TH√ÄNH C√îNG!")
        print("\nüìã C√°c b∆∞·ªõc ti·∫øp theo:")
        print("1. Ki·ªÉm tra th∆∞ m·ª•c 'distribution/'")
        print("2. Test file .exe tr∆∞·ªõc khi ph√¢n ph·ªëi")
        print("3. C√≥ th·ªÉ copy to√†n b·ªô th∆∞ m·ª•c 'distribution' cho ng∆∞·ªùi kh√°c")
        print("\nüí° L∆∞u √Ω: File exe c√≥ th·ªÉ b·ªã Windows Defender c·∫£nh b√°o l·∫ßn ƒë·∫ßu")
    else:
        print("\n‚ùå BUILD TH·∫§T B·∫†I!")
        print("Vui l√≤ng ki·ªÉm tra l·ªói ·ªü tr√™n v√† th·ª≠ l·∫°i")

    input("\nNh·∫•n Enter ƒë·ªÉ tho√°t...")


if __name__ == "__main__":
    main()
